{"version":3,"sources":["webpack://alecture/./pages/Channel/styles.tsx","webpack://alecture/./pages/Channel/index.tsx"],"names":["Container","Header","workspace","channel","useParams","data","myData","useSWR","fetcher","chat","onChangeChat","setChat","useInput","channelData","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","showInviteChannelModal","setShowInviteChannelModal","useState","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","name","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","chatSections","makeSection","flat","reverse","className","onClick","aria-label","data-sk","type","aria-hidden","ChatList","scrollRef","ChatBox","InviteChannelModal","show"],"mappings":"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","file":"256.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  \n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header } from '@pages/Channel/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (data.Channel.name === channel && data.UserId !== myData?.id) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} scrollRef={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"sourceRoot":""}