{"version":3,"sources":["webpack://alecture/./pages/DirectMessage/styles.tsx","webpack://alecture/./pages/DirectMessage/index.tsx"],"names":["Container","Header","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","scrollRef","ChatBox"],"mappings":"sLAEO,MAAMA,GAAY,cAAH,mBAAG,CAAH,iGAOTC,GAAS,iBAAH,mBAAG,CAAH,iP,4FCMnB,MAqGA,EArGsB,KAAM,QAC1B,MAAM,UAAEC,EAAF,GAAaC,IAAOC,WAClBC,KAAMC,IAAaC,QAAQ,mBAAkBL,WAAmBC,IAAMK,MACtEH,KAAMI,IAAWF,QAAO,aAAcC,MACvCE,EAAMC,EAAcC,IAAWC,OAAS,KACvCR,KAAMS,EAAUC,OAAQC,EAA1B,WAAsCC,EAAtC,QAAkDC,IAAYC,SACjEC,GAAW,mBAAkBlB,SAAiBC,2BAA4BiB,EAAQ,KACnFZ,MAEKa,IAAUC,OAAUpB,GAErBqB,EADoC,KAA1BT,SAAA,UAAAA,EAAW,UAAX,eAAeU,SACGV,IAAY,UAAAA,EAASA,EAASU,OAAS,UAA3B,eAA+BA,QAAS,KAAO,EACvFC,GAAeC,YAAmB,MAClCC,GAAeC,kBAClBC,IAGC,GAFAA,EAAEC,iBACFC,QAAQC,IAAItB,GACRA,WAAMuB,QAAUnB,EAAU,CAC5B,MAAMoB,EAAYxB,EAClBM,GAAYmB,IAAiB,MAU3B,OATAA,WAAe,GAAGC,QAAQ,CACxBjC,KAAK,UAAAW,EAAS,GAAG,UAAZ,eAAgBX,KAAM,GAAK,EAChCkC,QAASH,EACTI,SAAU7B,EAAON,GACjBoC,OAAQ9B,EACR+B,WAAYlC,EAASH,GACrBsC,SAAUnC,EACVoC,UAAW,IAAIC,OAEVR,KACN,GAAOS,MAAK,KAAM,MACnBhC,EAAQ,IACR,UAAAa,EAAaoB,eAAb,SAAsBC,oBAExBC,SACS,mBAAkB7C,SAAiBC,UAAY,CACpDkC,QAAS3B,IAEVkC,MAAK,KACJ3B,OAED+B,MAAMjB,QAAQkB,UAGrB,CAACvC,EAAMI,EAAUL,EAAQH,EAAUJ,EAAWC,IAG1C+C,GAAYtB,kBAAavB,IAEzBA,EAAKiC,WAAaa,OAAOhD,IAAOM,EAAON,KAAOgD,OAAOhD,IACvDa,GAAYF,IACVA,WAAW,GAAGsB,QAAQ/B,GACfS,KACN,GAAO8B,MAAK,KAKT,MAJAnB,EAAaoB,SAEbpB,EAAaoB,QAAQO,kBACrB3B,EAAaoB,QAAQQ,kBAAoB5B,EAAaoB,QAAQS,eAAiB,MAE/EvB,QAAQC,IAAI,kBAAZ,UAA+BP,EAAaoB,eAA5C,aAA+B,EAAsBU,aACrDC,YAAW,KAAM,MACf,UAAA/B,EAAaoB,eAAb,SAAsBC,mBACrB,UAKV,IAgBH,IAdAW,gBAAU,KACRpC,WAAQqC,GAAG,KAAMR,GACV,KACL7B,WAAQsC,IAAI,KAAMT,MAEnB,CAAC7B,EAAQ6B,KAGZO,gBAAU,KACoB,MAAH,KAArB3C,aAAA,EAAAA,EAAUU,UACZ,UAAAC,EAAaoB,eAAb,SAAsBC,oBAEvB,CAAChC,KAECR,IAAaG,EAChB,OAAO,KAGT,MAAMmD,GAAeC,OAAY/C,EAAWA,EAASgD,OAAOC,UAAY,IAExE,OACE,gBAAC/D,EAAD,KACE,gBAACC,EAAD,KACE,uBAAK+D,IAAKC,QAAa3D,EAAS4D,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAK/D,EAASgE,WACjF,4BAAOhE,EAASgE,WAElB,gBAACC,EAAA,EAAD,CAAUX,aAAcA,EAAcY,UAAW/C,EAAcP,QAASA,EAASK,cAAeA,IAChG,gBAACkD,EAAA,EAAD,CAAS/D,KAAMA,EAAMC,aAAcA,EAAcgB,aAAcA","file":"94.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header } from '@pages/DirectMessage/styles';\nimport { IDM } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport gravatar from 'gravatar';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  const onMessage = useCallback((data: IDM) => {\n    // id는 상대방 아이디\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList chatSections={chatSections} scrollRef={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"sourceRoot":""}