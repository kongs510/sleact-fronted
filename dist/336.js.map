{"version":3,"sources":["webpack://alecture/./components/InviteChannelModal/index.tsx","webpack://alecture/./components/Modal/styles.tsx","webpack://alecture/./components/Modal/index.tsx","webpack://alecture/./hooks/useSocket.ts","webpack://alecture/./components/DMList/styles.tsx","webpack://alecture/./components/ChannelList/index.tsx","webpack://alecture/./components/DMList/index.tsx","webpack://alecture/./components/InviteWorkspaceModal/index.tsx","webpack://alecture/./components/Menu/styles.tsx","webpack://alecture/./components/Menu/index.tsx","webpack://alecture/./layouts/Workspace/styles.tsx","webpack://alecture/./components/CreateChannelModal/index.tsx","webpack://alecture/./layouts/Workspace/index.tsx"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","revalidate","revalidateMembers","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","sockets","log","disconnect","io","transports","undefined","CollapseButton","collapse","location","useLocation","mutate","dedupingInterval","channelData","channelCollapse","setChannelCollapse","useState","countList","setCountList","toggleChannelCollapse","prev","resetCount","list","useEffect","pathname","className","data-qa","aria-hidden","map","count","key","name","activeClassName","to","memberData","socket","useSocket","onlineList","setOnlineList","on","off","member","isOnline","includes","data-qa-presence-self","data-qa-presence-active","data-qa-presence-dnd","nickname","setShowInviteWorkspaceModal","revalidateMember","Modal","CreateMenu","Menu","style","closeButton","defaultProps","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","revalidateChannel","onCreateChannel","withCredentials","Channel","loadable","DirectMessage","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showInviteWorkspaceModal","showInviteChannelModal","showWorkspaceModal","setShowWorkspaceModal","showCreateChannelModal","newWorkspace","onChangeNewWorkspace","setNewWorkpsace","newUrl","onChangeNewUrl","setNewUrl","emit","channels","v","onLogout","onCloseUserProfile","onClickUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","path","component","InviteChannelModal"],"mappings":"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","file":"336.js","sourcesContent":["import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { revalidate: revalidateMembers } = useSWR<IUser[]>(\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CloseModalButton, CreateModal } from '@components/Modal/styles';\nimport React, { FC, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n}\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import io from 'socket.io-client';\nimport { useCallback } from 'react';\n\nconst backUrl = 'http://localhost:3095';\n\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\n  console.log('rerender', workspace);\n  const disconnect = useCallback(() => {\n    if (workspace) {\n      sockets[workspace].disconnect();\n      delete sockets[workspace];\n    }\n  }, [workspace]);\n  if (!workspace) {\n    return [undefined, disconnect];\n  }\n  if (!sockets[workspace]) {\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n  }\n\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","// import useSocket from '@hooks/useSocket';\nimport { CollapseButton } from '@components/DMList/styles';\n// import { CollapseButton } from '@components/DMList/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst ChannelList: FC = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  // const [socket] = useSocket(workspace);\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [countList, setCountList] = useState<{ [key: string]: number | undefined }>({});\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  const resetCount = useCallback(\n    (id) => () => {\n      setCountList((list) => {\n        return {\n          ...list,\n          [id]: undefined,\n        };\n      });\n    },\n    [],\n  );\n\n  useEffect(() => {\n    console.log('ChannelList: workspace 바꼈다', workspace, location.pathname);\n    setCountList({});\n  }, [workspace, location]);\n\n  const onMessage = (data: IChat) => {\n    console.log('message 왔다', data);\n    const mentions: string[] | null = data.content.match(/@\\[(.+?)]\\((\\d)\\)/g);\n    if (mentions?.find((v) => v.match(/@\\[(.+?)]\\((\\d)\\)/)![2] === userData?.id.toString())) {\n      return setCountList((list) => {\n        return {\n          ...list,\n          [`c-${data.ChannelId}`]: (list[`c-${data.ChannelId}`] || 0) + 1,\n        };\n      });\n    }\n    setCountList((list) => {\n      return {\n        ...list,\n        [`c-${data.ChannelId}`]: list[`c-${data.ChannelId}`] || 0,\n      };\n    });\n  };\n  //\n  // useEffect(() => {\n  //   socket?.on('message', onMessage);\n  //   console.log('socket on message', socket?.hasListeners('message'));\n  //   return () => {\n  //     socket?.off('message', onMessage);\n  //     console.log('socket off message', socket?.hasListeners('message'));\n  //   };\n  // }, [socket]);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map((channel) => {\n            const count = countList[`c-${channel.id}`];\n            return (\n              <NavLink\n                key={channel.name}\n                activeClassName=\"selected\"\n                to={`/workspace/${workspace}/channel/${channel.name}`}\n                onClick={resetCount(`c-${channel.id}`)}\n              >\n                <span className={count !== undefined && count >= 0 ? 'bold' : undefined}># {channel.name}</span>\n                {count !== undefined && count > 0 && <span className=\"count\">{count}</span>}\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","// import useSocket from '@hooks/useSocket';\nimport useSocket from '@hooks/useSocket';\nimport { IDM, IUser, IUserWithOnline } from '@typings/db';\nimport { CollapseButton } from '@components/DMList/styles';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst DMList: FC = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [countList, setCountList] = useState<{ [key: string]: number }>({});\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  const resetCount = useCallback(\n    (id) => () => {\n      setCountList((list) => {\n        return {\n          ...list,\n          [id]: 0,\n        };\n      });\n    },\n    [],\n  );\n\n  const onMessage = (data: IDM) => {\n    console.log('dm왔다', data);\n    setCountList((list) => {\n      return {\n        ...list,\n        [data.SenderId]: list[data.SenderId] ? list[data.SenderId] + 1 : 1,\n      };\n    });\n  };\n\n  useEffect(() => {\n    console.log('DMList: workspace 바꼈다', workspace);\n    setOnlineList([]);\n    setCountList({});\n  }, [workspace]);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n    // socket?.on('dm', onMessage);\n    // console.log('socket on dm', socket?.hasListeners('dm'), socket);\n    return () => {\n      // socket?.off('dm', onMessage);\n      // console.log('socket off dm', socket?.hasListeners('dm'));\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            const count = countList[member.id] || 0;\n            return (\n              <NavLink\n                key={member.id}\n                activeClassName=\"selected\"\n                to={`/workspace/${workspace}/dm/${member.id}`}\n                onClick={resetCount(member.id)}\n              >\n                <i\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n                  }`}\n                  aria-hidden=\"true\"\n                  data-qa=\"presence_indicator\"\n                  data-qa-presence-self=\"false\"\n                  data-qa-presence-active=\"false\"\n                  data-qa-presence-dnd=\"false\"\n                />\n                <span className={count > 0 ? 'bold' : undefined}>{member.nickname}</span>\n                {member.id === userData?.id && <span> (나)</span>}\n                {count > 0 && <span className=\"count\">{count}</span>}\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { revalidate: revalidateMember } = useSWR<IChannel[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then((response) => {\n          revalidateMember();\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [workspace, newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { CSSProperties, FC, useCallback } from 'react';\nimport { CloseModalButton, CreateMenu } from './styles';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: (e: any) => void;\n  style: CSSProperties;\n  closeButton?: boolean;\n}\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) return null;\n\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div style={style} onClick={stopPropagation}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n  & img {\n    display: flex;\n  }\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n    &.selected {\n      color: white;\n    }\n  }\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n  & h2 {\n    padding-left: 20px;\n  }\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { useCallback, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: (flag: boolean) => void;\n}\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: userData, error, revalidate } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData, mutate, revalidate: revalidateChannel } = useSWR<IChannel[]>(\n    userData ? `/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const onCreateChannel = useCallback(\n    (e) => {\n      e.preventDefault();\n      axios\n        .post(\n          `/api/workspaces/${workspace}/channels`,\n          {\n            name: newChannel,\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then((response) => {\n          setShowCreateChannelModal(false);\n          revalidateChannel();\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newChannel],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button type=\"submit\">생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import ChannelList from '@components/ChannelList';\nimport DMList from '@components/DMList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport Menu from '@components/Menu';\nimport Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport {\n  AddButton,\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceButton,\n  WorkspaceModal,\n  WorkspaceName,\n  Workspaces,\n  WorkspaceWrapper,\n} from '@layouts/Workspace/styles';\nimport loadable from '@loadable/component';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { VFC, useCallback, useState, useEffect } from 'react';\nimport { Redirect, useParams } from 'react-router';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\nimport { toast } from 'react-toastify';\nimport CreateChannelModal from '@components/CreateChannelModal';\n\nconst Channel = loadable(() => import('@pages/Channel'));\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\n\nconst Workspace: VFC = () => {\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkpsace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n  const [socket, disconnect] = useSocket(workspace);\n\n  useEffect(() => {\n    if (channelData && userData && socket) {\n      console.log(socket);\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\n    }\n  }, [socket, channelData, userData]);\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [workspace, disconnect]);\n\n  const onLogout = useCallback(() => {\n    axios\n      .post('/api/users/logout', null, {\n        withCredentials: true,\n      })\n      .then(() => {\n        mutate(false, false);\n      });\n  }, []);\n\n  const onCloseUserProfile = useCallback((e) => {\n    e.stopPropagation();\n    setShowUserMenu(false);\n  }, []);\n\n  const onClickUserProfile = useCallback(() => {\n    setShowUserMenu((prev) => !prev);\n  }, []);\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) return;\n      if (!newUrl || !newUrl.trim()) return;\n      axios\n        .post(\n          '/api/workspaces',\n          {\n            workspace: newWorkspace,\n            url: newUrl,\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then(() => {\n          revalidate();\n          setShowCreateWorkspaceModal(false);\n          setNewWorkpsace('');\n          setNewUrl('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl],\n  );\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const toggleWorkspaceModal = useCallback(() => {\n    setShowWorkspaceModal((prev) => !prev);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowInviteWorkspaceModal(true);\n  }, []);\n\n  if (!userData) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <div>\n      <Header>\n        <RightMenu>\n          <span onClick={onClickUserProfile}>\n            <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\n            {showUserMenu && (\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onCloseUserProfile}>\n                <ProfileModal>\n                  <img src={gravatar.url(userData.nickname, { s: '36px', d: 'retro' })} alt={userData.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{userData.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </span>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData?.Workspaces.map((ws) => {\n            return (\n              <Link key={ws.id} to={`/workspace/${123}/channel/일반`}>\n                <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n              </Link>\n            );\n          })}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceModal}>Sleact</WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>Sleact</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onLogout}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Switch>\n            <Route path=\"/workspace/:workspace/channel/:channel\" component={Channel} />\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\n          </Switch>\n        </Chats>\n      </WorkspaceWrapper>\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 url</span>\n            <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </div>\n  );\n};\n\nexport default Workspace;\n"],"sourceRoot":""}